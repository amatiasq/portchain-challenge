// This is a pattern explained in https://amatiasq.com/talks/identifier-types/
export type PortId = string & { readonly brand: unique symbol };
export type VesselImo = string & { readonly brand: unique symbol };

export type PortCall = Omit<
  RawPortCall,
  'arrival' | 'departure' | 'createdDate'
> & {
  arrival: Date;
  departure: Date;
  createdDate: Date;
  duration: number;
};

export function parsePortCall(raw: RawPortCall): PortCall {
  const arrival = new Date(raw.arrival);
  const departure = new Date(raw.departure);

  return {
    ...raw,
    arrival,
    departure,
    createdDate: new Date(raw.createdDate),
    duration: departure.getTime() - arrival.getTime(),
  };
}

// Types below generated by https://quicktype.io

export interface Schedule {
  vessel: Vessel;
  portCalls: RawPortCall[];
}

export interface RawPortCall {
  arrival: string;
  departure: string;
  createdDate: string;
  isOmitted: boolean;
  service: string;
  port: Port;
  logEntries: LogEntry[];
}

export interface LogEntry {
  updatedField: UpdatedField;
  arrival: null | string;
  departure: null | string;
  isOmitted: boolean | null;
  createdDate: string;
}

export enum UpdatedField {
  Arrival = 'arrival',
  Departure = 'departure',
  IsOmitted = 'isOmitted',
}

export interface Port {
  id: PortId;
  name: string;
}

export interface Vessel {
  imo: VesselImo;
  name: string;
}
